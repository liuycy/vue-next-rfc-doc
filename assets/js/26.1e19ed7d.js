(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{355:function(e,t,v){"use strict";v.r(t);var r=v(37),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"_20-事件-api-更改"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_20-事件-api-更改"}},[e._v("#")]),e._v(" 20. 事件 API 更改")]),e._v(" "),v("blockquote",[v("p",[e._v("原文: "),v("a",{attrs:{href:"https://github.com/vuejs/rfcs/blob/master/active-rfcs/0020-events-api-change.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/vuejs/rfcs/blob/master/active-rfcs/0020-events-api-change.md"),v("OutboundLink")],1)])]),e._v(" "),v("ul",[v("li",[e._v("开始日期: 2020-01-21")]),e._v(" "),v("li",[e._v("目标版本: 3.x")]),e._v(" "),v("li",[e._v("参考 Issues: "),v("a",{attrs:{href:"https://github.com/vuejs/vue/issues/5443",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/vuejs/vue/issues/5443"),v("OutboundLink")],1),e._v(" "),v("a",{attrs:{href:"https://github.com/vuejs/vue-next/issues/635",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/vuejs/vue-next/issues/635"),v("OutboundLink")],1)]),e._v(" "),v("li",[e._v("实现 PR: N/A")])]),e._v(" "),v("h2",{attrs:{id:"概要"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概要"}},[e._v("#")]),e._v(" 概要")]),e._v(" "),v("p",[e._v("移除 "),v("code",[e._v("$on")]),e._v(", "),v("code",[e._v("$off")]),e._v(" 和 "),v("code",[e._v("$once")]),e._v(" 实例方法, Vue 实例不再实现事件触发接口.")]),e._v(" "),v("h2",{attrs:{id:"动机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#动机"}},[e._v("#")]),e._v(" 动机")]),e._v(" "),v("p",[e._v("Vue 1.x 实现了与 AngularJS 类似的组件事件系统, 使用  "),v("code",[e._v("$dispatch")]),e._v(" 和 "),v("code",[e._v("$broadcast")]),e._v(" 可以在组件树上进行双向通信.")]),e._v(" "),v("p",[e._v("在 Vue 2, 为了更符合状态驱动的数据流(使用 props 向下传递, 使用事件向上传递), 我们移除了 "),v("code",[e._v("$dispatch")]),e._v(" 和 "),v("code",[e._v("$broadcast")]),e._v(".")]),e._v(" "),v("p",[e._v("借助于 Vue 2 的 API "),v("code",[e._v("$emit")]),e._v(", 可以触发绑定在父组件上(在模板中 或 render 函数中)定义的事件处理函数, 但也可以触发事件触发器 API ("),v("code",[e._v("$on")]),e._v(", "),v("code",[e._v("$off")]),e._v(" 和 "),v("code",[e._v("$once")]),e._v(") 定义的处理函数.\n这实际上是一个累赘: 完整的事件触发器 API 并不是典型组件间数据流的一部分. 这些 API 很少被使用, 而且也没什么理由暴露在组件实例上.\n因此这个 RFC 提议移除 "),v("code",[e._v("$on")]),e._v(", "),v("code",[e._v("$off")]),e._v(" 和 "),v("code",[e._v("$once")]),e._v(" 实例方法.")]),e._v(" "),v("h2",{attrs:{id:"升级策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#升级策略"}},[e._v("#")]),e._v(" 升级策略")]),e._v(" "),v("p",[e._v("在 Vue 2 中, 事件触发器 API 最常见的用法是用空组件当 event hub. 这可以使用其他外部库来实现, 例如: "),v("a",{attrs:{href:"https://github.com/developit/mitt",target:"_blank",rel:"noopener noreferrer"}},[e._v("mitt"),v("OutboundLink")],1),e._v(".")]),e._v(" "),v("p",[e._v("在兼容版本中也支持这些方法.")])])}),[],!1,null,null,null);t.default=s.exports}}]);