(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{364:function(t,s,a){"use strict";a.r(s);var e=a(37),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_29-router-动态路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-router-动态路由"}},[t._v("#")]),t._v(" 29. router 动态路由")]),t._v(" "),a("blockquote",[a("p",[t._v("原文: "),a("a",{attrs:{href:"https://github.com/vuejs/rfcs/blob/master/active-rfcs/0029-router-dynamic-routing.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/vuejs/rfcs/blob/master/active-rfcs/0029-router-dynamic-routing.md"),a("OutboundLink")],1)])]),t._v(" "),a("ul",[a("li",[t._v("开始日期: 2020-01-27")]),t._v(" "),a("li",[t._v("目标版本: Vue 3 Router 4")]),t._v(" "),a("li",[t._v("参考 Issues: "),a("a",{attrs:{href:"https://github.com/vuejs/vue-router/issues?q=is%3Aopen+is%3Aissue+label%3A%22group%5Bdynamic+routing%5D%22",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("实现 PR:")])]),t._v(" "),a("h2",{attrs:{id:"概要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概要"}},[t._v("#")]),t._v(" 概要")]),t._v(" "),a("p",[t._v("介绍一种能在 router 运行时动态添加和移除路由记录的 API")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("router.addRoute(route: RouteRecord)")]),t._v(" 添加一个新路由")]),t._v(" "),a("li",[a("code",[t._v("router.removeRoute(name: string | symbol)")]),t._v(" 移除一个已存在的路由")]),t._v(" "),a("li",[a("code",[t._v("router.hasRoute(name: string | symbol): boolean")]),t._v(" 检查路由是否存在")]),t._v(" "),a("li",[a("code",[t._v("router.getRoutes(): RouteRecord[]")]),t._v(" 获取当前路由列表")])]),t._v(" "),a("h2",{attrs:{id:"基本用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用例"}},[t._v("#")]),t._v(" 基本用例")]),t._v(" "),a("p",[t._v("假设有这样一个 app 的路由实例:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/new-route'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'NewRoute'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  component"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" NewRoute\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为子路由加入到一个已存在的路由中")]),t._v("\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ParentRoute'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'new-route'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'NewRoute'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  component"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" NewRoute\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'NewRoute'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取添加完路由后的标准化路由记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" routeRecords "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRoutes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"动机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动机"}},[t._v("#")]),t._v(" 动机")]),t._v(" "),a("p",[t._v("动态路由功能可以使应用构建自己的路由系统. 就像 vue-cli 的 ui, 能允许添加可以自定义界面的图形插件那样.")]),t._v(" "),a("p",[t._v("当前版本的 Vue Router 只支持添加绝对路由. 此 RFC 目的是补充动态路由的其他功能, 讨论该 API 的不同形式和 Vue Router 的最佳特性. 目前, 如果不用 hacks 方法或创建一个完整的新 Router 实例是无法做到上述示例的效果的.")]),t._v(" "),a("p",[t._v("理论上讲能通过模块热更替更改路由的话, 可以提高开发体验.")]),t._v(" "),a("p",[t._v("注意: 动态路由只有在实现路径排列后才有意义 (自动的路由排序允许路有记录以任意顺序添加, 并且还能被正确匹配到). 加入此功能的最大成本在路径检测记录这块.")]),t._v(" "),a("h2",{attrs:{id:"设计细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计细节"}},[t._v("#")]),t._v(" 设计细节")]),t._v(" "),a("h3",{attrs:{id:"addroute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addroute"}},[t._v("#")]),t._v(" "),a("code",[t._v("addRoute")])]),t._v(" "),a("ul",[a("li",[t._v("可以添加绝对路由")]),t._v(" "),a("li",[t._v("可以添加子路由")]),t._v(" "),a("li",[t._v("冲突如何处理?")]),t._v(" "),a("li",[t._v("函数应该返回什么?")])]),t._v(" "),a("p",[t._v("示例代码用 TS 写是为了了解传入对象的更多信息:")]),t._v(" "),a("p",[a("code",[t._v("RouteRecord")]),t._v(" 和 创建 Router 实例时的 "),a("code",[t._v("routes")]),t._v(" 选项的类型一样. 看起来就像 (https://router.vuejs.org/zh/api/#routes). 值得注意的是, 这个对象与 "),a("code",[t._v("routes")]),t._v(" 选项一致, 因为在 Vue Router 4 中 "),a("code",[t._v("RouteRecord")]),t._v(" 的类型可能会有些许改动.")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" routeRecord"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RouteRecord "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/new-route'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'NewRoute'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  component"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" NewRoute\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("addRoute")]),t._v(" 函数传入的参数有多种选择.")]),t._v(" "),a("p",[t._v("对于没有命名的 routes 会返回一个可以移除该 route 的函数.")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" removeRoute "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("routeRecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移除该路由记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或")]),t._v("\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'NewRoute'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为命名是唯一的")]),t._v("\n")])])]),a("p",[t._v("如果我们在 "),a("code",[t._v("/new-route")]),t._v(" 路径上, 添加路由记录后 "),a("strong",[t._v("不会")]),t._v(" 自动触发 "),a("em",[t._v("replace")]),t._v(" 导航. 用户需要通过调用 "),a("code",[t._v("router.push")]),t._v(" 或 "),a("code",[t._v("router.replace")]),t._v(" 配合当前 location 自行控制跳转, 比如: "),a("code",[t._v("router.replace(router.currentRoute.value.fullPath)")]),t._v(" . 使用 location 字符串可以确保解析的是新 location 不是旧的 location. 如果在导航守卫中添加了路由, 要使用 "),a("code",[t._v("to")]),t._v(" 参数中的值:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newRoute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("由于动态路由是高级 API, 大部分用户不会直接使用它, 将其拆分出来能保证更大灵活性和优化操作. 建议还是使用配置项来添加路由.")]),t._v(" "),a("p",[a("em",[t._v("有关备选方案, 请查看 "),a("a",{attrs:{href:"#%E5%A4%87%E9%80%89%E6%96%B9%E6%A1%88"}},[t._v("这里")])])]),t._v(" "),a("h4",{attrs:{id:"冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冲突"}},[t._v("#")]),t._v(" 冲突")]),t._v(" "),a("p",[t._v("当添加的路由与存在的路由重名了, 就会替换掉存在的路由. 这是最方便的办法, 因为这样也允许了在不删除旧路由的情况下直接"),a("strong",[t._v("用相同命名的路由")]),t._v("替换成新的路由.")]),t._v(" "),a("p",[t._v("备选方案:")]),t._v(" "),a("ul",[a("li",[t._v("如果重名就报错, 并提示用户自行替换处理: 这样就不那么方便了")]),t._v(" "),a("li",[t._v("不会警告用户, 并替换掉该路由: 容易出现难以调试的错误")])]),t._v(" "),a("h4",{attrs:{id:"嵌套路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套路由"}},[t._v("#")]),t._v(" 嵌套路由")]),t._v(" "),a("p",[t._v("根据 "),a("code",[t._v("addRoute")]),t._v(" 传入的参数, 可以给一个命名的已存在的路由添加嵌套路由. 父级路由必须是已命名的.")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ParentRoute'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" routeRecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"函数签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数签名"}},[t._v("#")]),t._v(" 函数签名")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("addRoute")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" route"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RouteRecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("route"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RouteRecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"removeroute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removeroute"}},[t._v("#")]),t._v(" "),a("code",[t._v("removeRoute")])]),t._v(" "),a("p",[t._v("移除一个路由也会移除其所有子路由. 为了能通过 "),a("em",[t._v("RouterView")]),t._v(" 更新当前视图, "),a("code",[t._v("addRoute")]),t._v(" 有必要触发一个新的导航.")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("removeRoute")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"hasroute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hasroute"}},[t._v("#")]),t._v(" "),a("code",[t._v("hasRoute")])]),t._v(" "),a("p",[t._v("检查一个路由是否存在:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("hasRoute")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"getroutes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getroutes"}},[t._v("#")]),t._v(" "),a("code",[t._v("getRoutes")])]),t._v(" "),a("p",[t._v("获取标准化路由记录的列表:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("getRoutes")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RouteRecordNormalized"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("RouteRecordNormalized 的定义尚不明确, 但至少包含了 RouteRecord 的所有属性, 有些字段标准化了 (如 "),a("code",[t._v("components")]),t._v(" 代替了 "),a("code",[t._v("component")]),t._v(" 和 name 为 "),a("code",[t._v("undefined")]),t._v(" 的情况).")]),t._v(" "),a("h2",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),a("ul",[a("li",[t._v("该 API 会增加 vue-router 的体积. treeshakable 需要让匹配器 (与解析 "),a("code",[t._v("path")]),t._v(" 和 排列 path 相关) 以更简单的版本拓展出来, 这样写起来就很复杂, 不过我们可以到处不同版本的匹配器并允许用户在精简版本的 router 中自行定义匹配器.")])]),t._v(" "),a("h2",{attrs:{id:"备选方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备选方案"}},[t._v("#")]),t._v(" 备选方案")]),t._v(" "),a("h3",{attrs:{id:"addroutes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addroutes"}},[t._v("#")]),t._v(" "),a("code",[t._v("addRoutes")])]),t._v(" "),a("ul",[a("li",[t._v("根据添加的路由可能触发的导航来 resolve 或 reject 的 Promise (例如: 在添加 route 之前跳转到 "),a("code",[t._v("/new-route")]),t._v(")")])]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("location"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pathname "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "/new-route"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 返回一个可以移除该 route 的 promise 函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" removeRoute "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("routeRecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 返回值会和 `router.push` 返回值一样.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" route "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("routeRecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移除该 route")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者")]),t._v("\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'NewRoute'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 命名是唯一的")]),t._v("\n")])])]),a("ul",[a("li",[t._v("对所添加路由的引用 (原始路由对象的标准化复制)")])]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// js 对象 (和 router 持有的引用相同)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" normalizedRouteRecord "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("routeRecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("normalizedRouteRecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"getroutes-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getroutes-2"}},[t._v("#")]),t._v(" "),a("code",[t._v("getRoutes")])]),t._v(" "),a("p",[t._v("routes 对象中也可能会有响应式的属性, 可以在模板中使用这些属性, 虽然在大多数情况下应用层会禁止使用这些属性, "),a("strong",[t._v("保留与 router 同步的响应式的 route 对象")]),t._v(". 这样做可以避免为用户添加成本.")]),t._v(" "),a("h2",{attrs:{id:"升级策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#升级策略"}},[t._v("#")]),t._v(" 升级策略")]),t._v(" "),a("ul",[a("li",[t._v("在 Vue Router 3 中, 废弃 "),a("code",[t._v("addRoutes")]),t._v(" 并加入 "),a("code",[t._v("addRoute")]),t._v(". 其他方法是新的.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);