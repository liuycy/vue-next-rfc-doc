(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{366:function(t,s,a){"use strict";a.r(s);var n=a(37),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_31-attr-回退处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-attr-回退处理"}},[t._v("#")]),t._v(" 31. attr 回退处理")]),t._v(" "),a("blockquote",[a("p",[t._v("原文: "),a("a",{attrs:{href:"https://github.com/vuejs/rfcs/blob/master/active-rfcs/0031-attr-fallthrough.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/vuejs/rfcs/blob/master/active-rfcs/0031-attr-fallthrough.md"),a("OutboundLink")],1)])]),t._v(" "),a("ul",[a("li",[t._v("开始日期: 2019-11-05")]),t._v(" "),a("li",[t._v("目标版本: 3.x")]),t._v(" "),a("li",[t._v("参考 Issues: N/A")]),t._v(" "),a("li",[t._v("实现 PR: N/A")])]),t._v(" "),a("h2",{attrs:{id:"概要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概要"}},[t._v("#")]),t._v(" 概要")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在组件上使用 "),a("code",[t._v("v-on")]),t._v(" 监听器会自动处理回退并在组件根元素上注册原生事件. 不再需要 "),a("code",[t._v(".native")]),t._v(" 修饰符了.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("inheritAttrs: false")]),t._v(" 现在可以影响 "),a("code",[t._v("class")]),t._v(" 和 "),a("code",[t._v("style")]),t._v(".")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("this.$attrs")]),t._v(" 现在包括了除显式声明的 props 外的所有东西, 包括 "),a("code",[t._v("class")]),t._v(", "),a("code",[t._v("style")]),t._v(", 和 "),a("code",[t._v("v-on")]),t._v(" 监听器. "),a("code",[t._v("this.$listeners")]),t._v(" 被移除了.")])]),t._v(" "),a("li",[a("p",[t._v("函数式组件的 attribute 回退行为调整:")]),t._v(" "),a("ul",[a("li",[t._v("如果显式定义了 "),a("code",[t._v("props")]),t._v(": 会像状态组件那样处理所有的回退行为.")]),t._v(" "),a("li",[t._v("如果没有显式定义 "),a("code",[t._v("props")]),t._v(": 只会处理 "),a("code",[t._v("class")]),t._v(", "),a("code",[t._v("style")]),t._v(" 和 "),a("code",[t._v("v-on")]),t._v(" 监听器的回退行为.")])])])]),t._v(" "),a("h2",{attrs:{id:"动机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动机"}},[t._v("#")]),t._v(" 动机")]),t._v(" "),a("p",[t._v("在 Vue 2.x 中, 组件会隐式地处理回退行为. 传给组件的任何 attribute 如果没有定义为 props 的话, 会被认为是 "),a("strong",[t._v("无关 attribute")]),t._v(". 例如:")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("MyComp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),a("p",[t._v("如果 "),a("code",[t._v("MyComp")]),t._v(" 没有将 "),a("code",[t._v("id")]),t._v(" 定义为 prop , 那么 "),a("code",[t._v("id")]),t._v(" 会被认为是一个无关 attribute 并且会隐式应用于 "),a("code",[t._v("MyComp")]),t._v(" 的根元素上.")]),t._v(" "),a("p",[t._v("(通过传递 "),a("code",[t._v("class")]),t._v(" 和 "),a("code",[t._v("style")]),t._v(")在调整父子组件间的布局样式时该行为十分一致, 或者在给子组件应用 a11y attributes 时.")]),t._v(" "),a("p",[t._v("用户想要显式控制 attributes 在哪应用时, 该行为可以通过 "),a("code",[t._v("inheritAttrs: false")]),t._v(" 禁用. 这些无关 attributes 会暴露在实例属性: "),a("code",[t._v("this.$attrs")]),t._v(" 中.")]),t._v(" "),a("p",[t._v("在 2.x 中存在许多不一致的问题:")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("inheritAttrs: false")]),t._v(" 不能影响 "),a("code",[t._v("class")]),t._v(" 和 "),a("code",[t._v("style")]),t._v(".")])]),t._v(" "),a("li",[a("p",[t._v("隐式回退不能作用于事件监听器, 如果用户想要给根元素添加一个原生事件监听时需要加上 "),a("code",[t._v(".native")]),t._v(" 修饰符.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("class")]),t._v(", "),a("code",[t._v("style")]),t._v(" 和 "),a("code",[t._v("v-on")]),t._v(" 监听器没有包括在 "),a("code",[t._v("$attrs")]),t._v(" 中, 使得高级组件 (HOC) 在将所有东西往下传给嵌套的子组件时很麻烦.")])]),t._v(" "),a("li",[a("p",[t._v("函数式组件没有隐式 attrs 回退行为.")])])]),t._v(" "),a("p",[t._v("在 3.x 中, 我们也引入了 Fragments (在组件 template 中支持多个根节点), 所以需要对该行为进行额外的考虑.")]),t._v(" "),a("h2",{attrs:{id:"设计细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计细节"}},[t._v("#")]),t._v(" 设计细节")]),t._v(" "),a("h3",{attrs:{id:"v-on-监听器回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-on-监听器回退"}},[t._v("#")]),t._v(" "),a("code",[t._v("v-on")]),t._v(" 监听器回退")]),t._v(" "),a("p",[t._v("如下用法:")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("MyButton")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("@click")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),a("ul",[a("li",[a("p",[t._v("在 v2 中, "),a("code",[t._v("@click")]),t._v(" 只会注册组件的自定义事件监听. 要想监听 "),a("code",[t._v("MyButton")]),t._v(" 的原生事件, 需要使用 "),a("code",[t._v("@click.native")]),t._v(".")])]),t._v(" "),a("li",[a("p",[t._v("在 v3 中, "),a("code",[t._v("@click")]),t._v(" 监听器会回退并在 "),a("code",[t._v("MyButton")]),t._v(" 的根节点上注册一个原生的 click 事件监听. 也就是说组件作者不用再为了支持不带 "),a("code",[t._v(".native")]),t._v(" 修饰符 "),a("code",[t._v("v-on")]),t._v(" 用法, 将原生 DOM 事件代理到自定义事件了. 实际上, "),a("code",[t._v(".native")]),t._v(" 修饰符将会被完全移除.")])])]),t._v(" "),a("h4",{attrs:{id:"避免不必要的原生监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避免不必要的原生监听"}},[t._v("#")]),t._v(" 避免不必要的原生监听")]),t._v(" "),a("p",[t._v("当组件作者打算只触发组件自定义事件时, v3 的回退行为也许会造成不必要的原生事件被注册.")]),t._v(" "),a("p",[t._v("对着 VNode 结构的扁平化和 "),a("code",[t._v(".native")]),t._v(" 修饰符的移除, 所有监听器都会通过 "),a("code",[t._v("onXXX")]),t._v(" 函数传递给子组件:")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("@click")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("@custom")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),a("p",[t._v("compiles to:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  onClick"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  onCustom"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bar\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果发生回退, 所有的父级监听器会作为原生 DOM 监听器应用于目标元素. 在上例中, 由 "),a("code",[t._v("this.$emit('click')")]),t._v(" 触发的原生 click 事件和自定义事件都会调用父级的 "),a("code",[t._v("foo")]),t._v(" 处理函数. 这也许不是想要的行为.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/vuejs/rfcs/pull/16",target:"_blank",rel:"noopener noreferrer"}},[t._v("#16"),a("OutboundLink")],1),t._v(" 提出了引入 "),a("code",[t._v("emits")]),t._v(" 选项, 这个选项可以提供一种显式定义组件自定义事件的方法, 这样事件的监听器就会被排除在回退行为外了 (并且可以用 "),a("code",[t._v("this.$attrs")]),t._v(" 手动控制). 这两个 RFC 应该同时考虑.")]),t._v(" "),a("h3",{attrs:{id:"显式控制回退行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显式控制回退行为"}},[t._v("#")]),t._v(" 显式控制回退行为")]),t._v(" "),a("h4",{attrs:{id:"inheritattrs-false"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inheritattrs-false"}},[t._v("#")]),t._v(" "),a("code",[t._v("inheritAttrs: false")])]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("inheritAttrs: false")]),t._v(", 可以禁用隐式的回退行为. 组件可以选择忽略所有无关 attrs, 也可以通过 "),a("code",[t._v('v-bind="$attrs"')]),t._v(" 显式控制这些 attrs 应该用在哪里:")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("wrapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 在一个内部元素上应用 attrs, 而不是在根节点上 --\x3e")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-bind")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("$attrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[a("code",[t._v("this.$attrs")]),t._v(" (和 "),a("code",[t._v("setup()")]),t._v(" 中的 "),a("code",[t._v("context.attrs")]),t._v(" 以及 函数式组件) 现在包含了所有传递给组件的 attributes (只要没在 props 中定义的). 还包含了 "),a("code",[t._v("class")]),t._v(", "),a("code",[t._v("style")]),t._v(", 普通 attributes 和 "),a("code",[t._v("v-on")]),t._v(" 监听器. 这些都是基于"),a("RouterLink",{attrs:{to:"/RFCs/0008-render-function-api-change.html#扁平的-vnodes-props-格式"}},[t._v("render 函数 API 更改")]),t._v("中的扁平结构的 props 提出的.")],1),t._v(" "),a("p",[a("code",[t._v("v-on")]),t._v(" 监听器会作为 "),a("code",[t._v("onXXX")]),t._v(" 属性被包含在 "),a("code",[t._v("$attrs")]),t._v(". For example, "),a("code",[t._v("@click")]),t._v(" 在 "),a("code",[t._v("$attrs")]),t._v(" 中生成一个 "),a("code",[t._v("onClick")]),t._v(". 如果用户想要分开处理 attributes 和 监听器, 可以简单地写个 helper 函数判断是否以 "),a("code",[t._v("on")]),t._v(" 开头来区分属性.")]),t._v(" "),a("h4",{attrs:{id:"多个根节点-fragment-组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多个根节点-fragment-组件"}},[t._v("#")]),t._v(" 多个根节点 / Fragment 组件")]),t._v(" "),a("p",[t._v("在 Vue 3 中, 组件可以由多个根元素组成 (例如. fragment root). 在这种情况下, 自动合并不会被执行. 用户需要自行将 attrs 扩展到所需的元素:")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-bind")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("$attrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("main element"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("如果 "),a("code",[t._v("$attrs")]),t._v(" 不是空的, 用户也没有自行拓展 (这个可以在渲染时检查 "),a("code",[t._v("this.$attrs")]),t._v(" 有没有被访问判断出来的), 那么就会抛出一个运行时警告. 组件要么将 "),a("code",[t._v("$attrs")]),t._v(" 绑定到一个元素上, 要么通过使用 "),a("code",[t._v("inheritAttrs: false")]),t._v(" 明确处理警告.")]),t._v(" "),a("h4",{attrs:{id:"在-render-函数中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-render-函数中"}},[t._v("#")]),t._v(" 在 Render 函数中")]),t._v(" "),a("p",[t._v("在手写的 render 函数中, 只需要使用拓展符十分方便:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  props"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  inheritAttrs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$attrs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("不过这样会造成 attrs 覆盖那些同名的 props. 例如, 有个 "),a("code",[t._v("class")]),t._v(" 可能会被覆盖, 但我们只是想合并而已. Vue 提供了一个 "),a("code",[t._v("mergeProps")]),t._v(" helper 函数来处理 "),a("code",[t._v("class")]),t._v(", "),a("code",[t._v("style")]),t._v(" 和 "),a("code",[t._v("onXXX")]),t._v(" 监听器的合并:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mergeProps "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  props"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  inheritAttrs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$attrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("其实这也是 "),a("code",[t._v("v-bind")]),t._v(" 的内部实现.")]),t._v(" "),a("p",[t._v("如果是从 "),a("code",[t._v("setup")]),t._v(" 返回的 render 函数, attrs 对象会被暴露在 setup 的上下文中:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mergeProps "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  props"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  inheritAttrs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" attrs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意 "),a("code",[t._v("attrs")]),t._v(" 对象会在每次渲染之前更新, 所以可以在这里解构它.")]),t._v(" "),a("h3",{attrs:{id:"函数式组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式组件"}},[t._v("#")]),t._v(" 函数式组件")]),t._v(" "),a("p",[t._v("在 2.x 中, 函数式组件不支持 attribute 的自动回退, 而且需要手动合并 props.")]),t._v(" "),a("p",[t._v("在 v3 中, 函数式组件使用不同的语法: 现在以普通函数定义函数式组件了 (详见"),a("RouterLink",{attrs:{to:"/RFCs/0008-render-function-api-change.html#函数组件签名"}},[t._v("render 函数 API 更改")]),t._v(").")],1),t._v(" "),a("h4",{attrs:{id:"显式定义-props"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显式定义-props"}},[t._v("#")]),t._v(" 显式定义 Props")]),t._v(" "),a("p",[t._v("显式定义了 "),a("code",[t._v("props")]),t._v(" 的函数式组件会和状态组件一样自动处理回退行为. 也可以使用 "),a("code",[t._v("inheritAttrs: false")]),t._v(" 手动控制 attrs:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("Func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" attrs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*...*/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inheritAttrs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("h4",{attrs:{id:"可选定义-props"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选定义-props"}},[t._v("#")]),t._v(" 可选定义 Props")]),t._v(" "),a("p",[t._v("v3 的函数式组件支持 "),a("a",{attrs:{href:"#TODO"}},[t._v("可选的 Props 定义")]),t._v(". 当一个函数式组件没有定义 "),a("code",[t._v("props")]),t._v(" 时, 它会接收父级传过来的所有 attributes 并合进 "),a("code",[t._v("props")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("Foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("当一个函数式组件使用可选的 props 定义时, 只有 "),a("code",[t._v("class")]),t._v(", "),a("code",[t._v("style")]),t._v(", 和 "),a("code",[t._v("v-on")]),t._v(" 监听器会隐式回退.")]),t._v(" "),a("p",[t._v("只有 "),a("code",[t._v("class")]),t._v(", "),a("code",[t._v("style")]),t._v(" 和 "),a("code",[t._v("v-on")]),t._v(" 监听器除外的原因是:")]),t._v(" "),a("ul",[a("li",[t._v("它们涵盖了回退行为的大多数情况.")]),t._v(" "),a("li",[t._v("它们几乎没有与 props 重名的风险.")]),t._v(" "),a("li",[t._v("它们需要特殊的合并逻辑而非简单覆盖, 所以隐式处理会更方便.")])]),t._v(" "),a("p",[t._v("如果一个使用可选 props 定义的函数式组件需要支持完整的 attribute 回退行为, 可以使用 "),a("code",[t._v("inheritAttrs: false")]),t._v(", 从 "),a("code",[t._v("props")]),t._v(" 中选择那些想要使用的 attrs, 然后合并到根元素上:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解构 props, 并使用拓展符号将其余属性合并为 attrs.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("Func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("attrs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inheritAttrs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("h3",{attrs:{id:"废弃的-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#废弃的-api"}},[t._v("#")]),t._v(" 废弃的 API")]),t._v(" "),a("ul",[a("li",[t._v("v-on 上的 "),a("code",[t._v(".native")]),t._v(" 修饰符会被移除.")]),t._v(" "),a("li",[a("code",[t._v("this.$listeners")]),t._v(" 会被移除.")])]),t._v(" "),a("h2",{attrs:{id:"升级策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#升级策略"}},[t._v("#")]),t._v(" 升级策略")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("移除的 API 可以在兼容版本中使用:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(".native")]),t._v(" 修饰符会是一个空操作 (no-op) 并在模板编译时抛出一个警告.")]),t._v(" "),a("li",[a("code",[t._v("this.$listeners")]),t._v(" 可以使用但会抛出一个运行时警告.")])])]),t._v(" "),a("li",[a("p",[t._v("从技术上讲可能有这种情况, 用户使用 "),a("code",[t._v("inheritAttrs: false")]),t._v(" 就是为了不影响 "),a("code",[t._v("class")]),t._v(" 和 "),a("code",[t._v("style")]),t._v(", 不过应该是少数的. 我们会在迁移指南/帮助中设置专门的一块来提醒用户检查是否由这种情况.")])]),t._v(" "),a("li",[a("p",[t._v("由于函数式组件使用了新语法, 用户可能需要手动更新. 我们应该会在迁移指南中为函数式组件设置一个专门的章节.")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);